<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.maqs.moneytracker.model.Transaction" table="transaction">
		<meta attribute="class-description">This class contains Transaction details.</meta>
		<id name="id" type="long" column="ID">
			<generator class="native" />
		</id>

		<property name="onDate" type="timestamp" column="ON_DATE" />

		<property name="amount" type="big_decimal" column="AMOUNT" />
		
		<property name="categoryId" type="long" column="CAT_ID" />
		
		<property name="accountId" type="long" column="ACCT_ID" />

		<property name="description" type="string" column="DESCRIPTION" />
		
		<property name="createdOn" type="timestamp"  column="CREATED_DATE" />
		
		<property name="lastModifiedOn" type="timestamp"  column="MODIFIED_DATE" />
		
		<property name="recurring" type="boolean" column="IS_REC" />
		
		<property name="recurringWhen" type="string" column="REC_WHEN" />
		
		<property name="checksum" type="string" column="CHECKSUM" />
		
		<property name="fromAccountId" type="long" column="FROM_ACCT_ID" />
		
		<property name="userId" type="long" column="user_id" />
	</class>
	
	<sql-query name="Transaction.getMonthlyIncExpReport">
		<return-scalar column="onDate" type="timestamp"/>
		<return-scalar column="tranType" type="string"/>
		<return-scalar column="amount" type="big_decimal"/>	
			<![CDATA[select t.on_date as onDate, c.tran_type as tranType, 
			sum(t.amount) as amount from transaction t, category c where t.cat_id = c.id 
			and t.on_date between ? and ? and t.user_id = ? 
			group by c.tran_type, month(t.on_date), year(t.on_date) order by t.on_date]]>
	</sql-query>
	
	<sql-query name="Transaction.getMonthlyHistoryReportByCat">
		<return-scalar column="onDate" type="timestamp"/>
		<return-scalar column="catType" type="string"/>
		<return-scalar column="amount" type="big_decimal"/>	
		<return-scalar column="tranType" type="string"/>
			<![CDATA[
			select t.on_date as onDate, c.name as catType, sum(t.amount) as amount, c.tran_type as tranType 
			from transaction t, category c where c.id = t.cat_id and c.tran_type = ? 
			and c.id = ? and t.on_date between ? and ? and t.user_id = ? group by month(t.on_date), year(t.on_date) order by t.on_date]]>
	</sql-query>
	
	<sql-query name="Transaction.getMaxCat">
		<return-scalar column="id" type="long"/>
		<return-scalar column="name" type="string"/>		
		<![CDATA[
		select id as id, name as name from category where id = 
		(select c.id from transaction t, category c where c.tran_type = ? and t.user_id = ? 
		and t.cat_id = c.id order by t.amount desc limit 1) ]]>
	</sql-query>
	
	<sql-query name="Transaction.getLastTransactionByCat">
		<return-scalar column="id" type="long"/>
		<return-scalar column="description" type="string"/>
		<return-scalar column="amount" type="big_decimal"/>		
		<![CDATA[
		select t.id as id, t.amount as amount, t.description as description from transaction t 
		where t.cat_id = ? and t.user_id = ? order by t.on_date desc limit 1]]>
	</sql-query>
	
	<sql-query name="Transaction.listTopCategories">
		<return-scalar column="catId" type="long"/>
		<return-scalar column="amount" type="big_decimal"/>
			<![CDATA[
			select c.id as catId, sum(t.amount) as amount 
			from transaction t, category c where c.id = t.cat_id and c.tran_type = ? 
			and t.on_date between ? and ? and t.user_id = ? group by c.name order by amount desc limit ?]]>
	</sql-query>
	<sql-query name="Transaction.getTotalAmount">
		<return-scalar column="amount" type="big_decimal"/>
			<![CDATA[
			select sum(t.amount) as amount 
			from transaction t, category c where c.id = t.cat_id and c.tran_type = ? 
			and t.on_date between ? and ? and t.user_id = ? ]]>
	</sql-query>
	<sql-query name="Transaction.getInAndOutOfIncAndExp">
		<return-scalar column="acctName" type="string"/>
		<return-scalar column="expAmt" type="big_decimal"/>
		<return-scalar column="incAmt" type="big_decimal"/>
			<![CDATA[
			select a.name as acctName, 
			sum(case when c.tran_type = 'E' then t.amount end) as expAmt, 
			sum(case when c.tran_type = 'I' then t.amount end) as incAmt from 
			transaction t, category c, account a where t.cat_id = c.id and t.acct_id = a.id and t.on_date between ? and ? 
			and t.user_id = ? group by a.name order by a.name;]]>
	</sql-query>
	<sql-query name="Transaction.transactionTypeReport">
	    <return-scalar column="catId" type="long"/>
		<return-scalar column="catType" type="string"/>
		<return-scalar column="amount" type="big_decimal"/>	
			<![CDATA[select c.id as catId, c.name as catType, sum(t.amount) as amount from transaction t, category c where t.cat_id = c.id 
			and t.on_date between ? and ? and c.tran_type = ? and t.user_id = ? 
			group by c.id order by c.name]]>
	</sql-query>	
	<sql-query name="Transaction.getIncomeExpenseTotal">
	    <return-scalar column="tranType" type="string"/>
		<return-scalar column="expenseTotal" type="big_decimal"/>	
		<return-scalar column="incomeTotal" type="big_decimal"/>
			<![CDATA[select c.tran_type as tranType, 
			sum(case when c.tran_type = 'E' then t.amount else 0 end) as expenseTotal,
			sum(case when c.tran_type = 'I' then t.amount else 0 end) as incomeTotal	 
			from transaction t, category c where t.cat_id = c.id 
			and t.on_date between ? and ? and t.user_id = ? 
			group by c.tran_type]]>
	</sql-query>
	<sql-query name="Transaction.sumByCategoriesReport">
		<return-scalar column="catId" type="long"/>
		<return-scalar column="amount" type="big_decimal"/>	
			<![CDATA[select t.cat_id as catId, sum(t.amount) as amount from transaction t, category c where t.cat_id = c.id AND
			t.on_date between ? and ? AND c.tran_type = ? and t.user_id = ? 
			group by t.cat_id]]>
	</sql-query>
</hibernate-mapping>